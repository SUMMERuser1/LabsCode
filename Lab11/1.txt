import csv
import psycopg2
import json

def connect_db():
    """ Connects to the specified PostgreSQL database. """
    return psycopg2.connect(dbname='PhoneBook', user='postgres', password='admin', port='5432')

def create_table():
    """ Creates a phonebook table if it does not exist. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS phonebook (
                    id SERIAL PRIMARY KEY,
                    first_name VARCHAR(100),
                    last_name VARCHAR(100),
                    phone_number VARCHAR(15) UNIQUE NOT NULL,
                    email VARCHAR(100)
                );
            """)
            conn.commit()
            print("Table created successfully.")

def setup_database():
    """ Creates necessary database functions and procedures. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            # Function to search records based on a pattern
            cur.execute("""
                CREATE OR REPLACE FUNCTION search_records(pattern VARCHAR)
                RETURNS TABLE(id INT, first_name VARCHAR, last_name VARCHAR, phone_number VARCHAR, email VARCHAR) AS $$
                BEGIN
                    RETURN QUERY SELECT * FROM phonebook WHERE
                        first_name LIKE '%' || pattern || '%' OR
                        last_name LIKE '%' || pattern || '%' OR
                        phone_number LIKE '%' || pattern || '%';
                END;
                $$ LANGUAGE plpgsql;
            """)

            # Procedure to insert or update a user
            cur.execute("""
                CREATE OR REPLACE PROCEDURE upsert_user(first_name VARCHAR, last_name VARCHAR, phone VARCHAR, email VARCHAR DEFAULT NULL)
                LANGUAGE plpgsql AS $$
                BEGIN
                    INSERT INTO phonebook (first_name, last_name, phone_number, email)
                    VALUES (first_name, last_name, phone, email)
                    ON CONFLICT (phone_number) DO UPDATE SET
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        email = EXCLUDED.email;
                END;
                $$;
            """)

            # Procedure to insert multiple users with validation
            cur.execute("""
                CREATE OR REPLACE PROCEDURE insert_multiple_users(users JSONB)
                LANGUAGE plpgsql AS $$
                DECLARE
                    user_data JSONB;
                    phone_pattern TEXT := '^[+]\d{10,15}$'; -- Basic international phone format check
                BEGIN
                    FOR user_data IN SELECT * FROM json_array_elements(users)
                    LOOP
                        IF (user_data->>'phone_number') ~ phone_pattern THEN
                            CALL upsert_user(user_data->>'first_name', user_data->>'last_name', user_data->>'phone_number', user_data->>'email');
                        ELSE
                            RAISE NOTICE 'Invalid phone number: %', user_data->>'phone_number';
                        END IF;
                    END LOOP;
                END;
                $$;
            """)

            # Function for data pagination
            cur.execute("""
                CREATE OR REPLACE FUNCTION fetch_paginated_data(page_limit INT, page_offset INT)
                RETURNS TABLE(id INT, first_name VARCHAR, last_name VARCHAR, phone_number VARCHAR, email VARCHAR) AS $$
                BEGIN
                    RETURN QUERY SELECT * FROM phonebook ORDER BY id LIMIT page_limit OFFSET page_offset;
                END;
                $$ LANGUAGE plpgsql;
            """)

            # Procedure to delete data by username or phone
            cur.execute("""
                CREATE OR REPLACE PROCEDURE delete_user_by_name_or_phone(p_first_name VARCHAR DEFAULT NULL, p_phone_number VARCHAR DEFAULT NULL)
                LANGUAGE plpgsql AS $$
                BEGIN
                    IF p_first_name IS NOT NULL THEN
                        DELETE FROM phonebook WHERE first_name = p_first_name;
                    END IF;
                    IF p_phone_number IS NOT NULL THEN
                        DELETE FROM phonebook WHERE phone_number = p_phone_number;
                    END IF;
                END;
                $$;
            """)
            conn.commit()
            print("Database functions and procedures created successfully.")

def insert_from_csv(file_path):
    """ Inserts multiple entries from a CSV file into the phonebook. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            with open(file_path, 'r') as f:
                reader = csv.reader(f)
                next(reader)  # Skip the header row if present
                for row in reader:
                    cur.execute("INSERT INTO phonebook (first_name, last_name, phone_number, email) VALUES (%s, %s, %s, %s) ON CONFLICT (phone_number) DO NOTHING", row)
            conn.commit()
            print("Data inserted from CSV successfully.")

def insert_from_console():
    """ Inserts a single entry from console input into the phonebook. """
    first_name = input("Enter first name: ")
    last_name = input("Enter last name: ")
    phone_number = input("Enter phone number: ")
    email = input("Enter email (optional, press Enter to skip): ")
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO phonebook (first_name, last_name, phone_number, email) VALUES (%s, %s, %s, %s) ON CONFLICT (phone_number) DO NOTHING",
                        (first_name, last_name, phone_number, email or None))
            conn.commit()
            print("Data inserted from console successfully.")

def update_data(phone_number, new_first_name=None, new_phone=None):
    """ Updates contact details in the phonebook. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            if new_first_name:
                cur.execute("UPDATE phonebook SET first_name = %s WHERE phone_number = %s", (new_first_name, phone_number))
            if new_phone:
                cur.execute("UPDATE phonebook SET phone_number = %s WHERE phone_number = %s", (new_phone, phone_number))
            conn.commit()
            print("Data updated successfully.")

def query_data(first_name=None, phone_number=None):
    """ Queries contacts by first name or phone number. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            query = "SELECT * FROM phonebook WHERE TRUE"
            params = []
            if first_name:
                query += " AND first_name = %s"
                params.append(first_name)
            if phone_number:
                query += " AND phone_number = %s"
                params.append(phone_number)
            cur.execute(query, params)
            results = cur.fetchall()
            for result in results:
                print(result)

def delete_data(first_name=None, phone_number=None):
    """ Deletes contacts by first name or phone number. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            if first_name:
                cur.execute("DELETE FROM phonebook WHERE first_name = %s", (first_name,))
            if phone_number:
                cur.execute("DELETE FROM phonebook WHERE phone_number = %s", (phone_number,))
            conn.commit()
            print("Data deleted successfully.")

def search_records_by_pattern(pattern):
    """Searches the phonebook for records matching a pattern in first name, last name, or phone number."""
    with connect_db() as conn:
        with conn.cursor() as cur:
            # Execute the stored function
            cur.execute("SELECT * FROM search_records(%s)", (pattern,))
            results = cur.fetchall()
            if results:
                for result in results:
                    print(result)
            else:
                print("No records found matching the pattern.")

import csv
import psycopg2
import json

def connect_db():
    """ Connects to the specified PostgreSQL database. """
    return psycopg2.connect(dbname='PhoneBook', user='postgres', password='admin', port='5432')

def create_table():
    """ Creates a phonebook table if it does not exist. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS phonebook (
                    id SERIAL PRIMARY KEY,
                    first_name VARCHAR(100),
                    last_name VARCHAR(100),
                    phone_number VARCHAR(15) UNIQUE NOT NULL,
                    email VARCHAR(100)
                );
            """)
            conn.commit()
            print("Table created successfully.")

def setup_database():
    """ Creates necessary database functions and procedures. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            # Function to search records based on a pattern
            cur.execute("""
                CREATE OR REPLACE FUNCTION search_records(pattern VARCHAR)
                RETURNS TABLE(id INT, first_name VARCHAR, last_name VARCHAR, phone_number VARCHAR, email VARCHAR) AS $$
                BEGIN
                    RETURN QUERY SELECT * FROM phonebook WHERE
                        first_name LIKE '%' || pattern || '%' OR
                        last_name LIKE '%' || pattern || '%' OR
                        phone_number LIKE '%' || pattern || '%';
                END;
                $$ LANGUAGE plpgsql;
            """)

            # Procedure to insert or update a user
            cur.execute("""
                CREATE OR REPLACE PROCEDURE upsert_user(first_name VARCHAR, last_name VARCHAR, phone VARCHAR, email VARCHAR DEFAULT NULL)
                LANGUAGE plpgsql AS $$
                BEGIN
                    INSERT INTO phonebook (first_name, last_name, phone_number, email)
                    VALUES (first_name, last_name, phone, email)
                    ON CONFLICT (phone_number) DO UPDATE SET
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        email = EXCLUDED.email;
                END;
                $$;
            """)

            # Procedure to insert multiple users with validation
            cur.execute("""
                CREATE OR REPLACE PROCEDURE insert_multiple_users(users JSONB)
                LANGUAGE plpgsql AS $$
                DECLARE
                    user_data JSONB;
                    phone_pattern TEXT := '^[+]\d{10,15}$'; -- Basic international phone format check
                BEGIN
                    FOR user_data IN SELECT * FROM json_array_elements(users)
                    LOOP
                        IF (user_data->>'phone_number') ~ phone_pattern THEN
                            CALL upsert_user(user_data->>'first_name', user_data->>'last_name', user_data->>'phone_number', user_data->>'email');
                        ELSE
                            RAISE NOTICE 'Invalid phone number: %', user_data->>'phone_number';
                        END IF;
                    END LOOP;
                END;
                $$;
            """)

            # Function for data pagination
            cur.execute("""
                CREATE OR REPLACE FUNCTION fetch_paginated_data(page_limit INT, page_offset INT)
                RETURNS TABLE(id INT, first_name VARCHAR, last_name VARCHAR, phone_number VARCHAR, email VARCHAR) AS $$
                BEGIN
                    RETURN QUERY SELECT * FROM phonebook ORDER BY id LIMIT page_limit OFFSET page_offset;
                END;
                $$ LANGUAGE plpgsql;
            """)

            # Procedure to delete data by username or phone
            cur.execute("""
                CREATE OR REPLACE PROCEDURE delete_user_by_name_or_phone(p_first_name VARCHAR DEFAULT NULL, p_phone_number VARCHAR DEFAULT NULL)
                LANGUAGE plpgsql AS $$
                BEGIN
                    IF p_first_name IS NOT NULL THEN
                        DELETE FROM phonebook WHERE first_name = p_first_name;
                    END IF;
                    IF p_phone_number IS NOT NULL THEN
                        DELETE FROM phonebook WHERE phone_number = p_phone_number;
                    END IF;
                END;
                $$;
            """)
            conn.commit()
            print("Database functions and procedures created successfully.")

def insert_from_csv(file_path):
    """ Inserts multiple entries from a CSV file into the phonebook. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            with open(file_path, 'r') as f:
                reader = csv.reader(f)
                next(reader)  # Skip the header row if present
                for row in reader:
                    cur.execute("INSERT INTO phonebook (first_name, last_name, phone_number, email) VALUES (%s, %s, %s, %s) ON CONFLICT (phone_number) DO NOTHING", row)
            conn.commit()
            print("Data inserted from CSV successfully.")

def insert_from_console():
    """ Inserts a single entry from console input into the phonebook. """
    first_name = input("Enter first name: ")
    last_name = input("Enter last name: ")
    phone_number = input("Enter phone number: ")
    email = input("Enter email (optional, press Enter to skip): ")
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO phonebook (first_name, last_name, phone_number, email) VALUES (%s, %s, %s, %s) ON CONFLICT (phone_number) DO NOTHING",
                        (first_name, last_name, phone_number, email or None))
            conn.commit()
            print("Data inserted from console successfully.")

def update_data(phone_number, new_first_name=None, new_phone=None):
    """ Updates contact details in the phonebook. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            if new_first_name:
                cur.execute("UPDATE phonebook SET first_name = %s WHERE phone_number = %s", (new_first_name, phone_number))
            if new_phone:
                cur.execute("UPDATE phonebook SET phone_number = %s WHERE phone_number = %s", (new_phone, phone_number))
            conn.commit()
            print("Data updated successfully.")

def query_data(first_name=None, phone_number=None):
    """ Queries contacts by first name or phone number. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            query = "SELECT * FROM phonebook WHERE TRUE"
            params = []
            if first_name:
                query += " AND first_name = %s"
                params.append(first_name)
            if phone_number:
                query += " AND phone_number = %s"
                params.append(phone_number)
            cur.execute(query, params)
            results = cur.fetchall()
            for result in results:
                print(result)

def delete_data(first_name=None, phone_number=None):
    """ Deletes contacts by first name or phone number. """
    with connect_db() as conn:
        with conn.cursor() as cur:
            if first_name:
                cur.execute("DELETE FROM phonebook WHERE first_name = %s", (first_name,))
            if phone_number:
                cur.execute("DELETE FROM phonebook WHERE phone_number = %s", (phone_number,))
            conn.commit()
            print("Data deleted successfully.")

def search_records_by_pattern(pattern):
    """Searches the phonebook for records matching a pattern in first name, last name, or phone number."""
    with connect_db() as conn:
        with conn.cursor() as cur:
            # Execute the stored function
            cur.execute("SELECT * FROM search_records(%s)", (pattern,))
            results = cur.fetchall()
            if results:
                for result in results:
                    print(result)
            else:
                print("No records found matching the pattern.")




if __name__ == "__main__":
    create_table()  # Ensure the table is created
    setup_database()  # Set up database functions and procedures if not already done

    # Example usage of the delete function
    delete_data(first_name="Alice")  # Deletes all entries with the first name Alice
    delete_data(phone_number="123-456-7890")  # Deletes entry with the phone number 123-456-7890

    # Additional operations can be added here as needed
    insert_from_console()
    update_data('987-654-3210', new_first_name='Bob')
    query_data(first_name='Bob')







